#include <bits/stdc++.h>

using namespace std;

const int max_n = 10000;

int n;
vector<int> v(max_n);
vector<int> tail_asc(max_n);
vector<int> tail_dsc(max_n);
vector<int> length_asc(max_n);
vector<int> length_dsc(max_n);
vector<int> tailof(max_n);
vector<int> headof(max_n);
int solution;

int find_best_j(int value, bool ascending, int l, int r) {
    while (l + 1 < r) {
        int m = l + (r - l) / 2;

        if (ascending) {
            if (v[tail_asc[m]] < value) {
                l = m;
            } else {
                 r = m;
            }
        } else {
            if (v[tail_dsc[m]] > value) {
                r = m;
            } else {
                l = m;
            }
        }
    }

    return r; 
}

int main() {
    freopen("euro2.in", "r", stdin);
    //freopen("euro2.out", "w", stdout);

    cin >> n;
    double tmp1;
    int tmp2;
    for (int i = 0; i < n; i++) {
        cin >> tmp1;
        tmp2 = static_cast<int>(tmp1 * 10000);
        v[i] = tmp2;

        tail_asc[i] = tail_dsc[i] = 0;
    }

    for (int end = 1; end < n - 1; end++) {
        tail_asc[0] = 0;

        for (int i = 1; i <= end; i++) {
            if (v[i] < v[tail_asc[0]]) {
                tail_asc[0] = i;
            } else if (v[i] > v[tail_asc[length_asc[end]]]) {
                tail_asc[++length_asc[end]] = i;
            } else {
                int j = find_best_j(v[i], true, -1, length_asc[end]);
                tail_asc[j] = i;
            }
        }
        tailof[end] = tail_asc[length_asc[end]];
    }
/*
    for (int i = 1; i < n - 1; i++) {
        cout << length_asc[i] << " ";
    } cout << endl;
*/
    for (int start = 2; start < n; start++) {
        tail_dsc[0] = start;

        for (int i = start; i < n; i++) {
            if (v[i] > v[tail_dsc[0]]) {
                tail_dsc[0] = i;
            } else if (v[i] < v[tail_dsc[length_dsc[start]]]) {
                tail_dsc[++length_dsc[start]] = i;
            } else {
                int j = find_best_j(v[i], false, start - 1, length_dsc[start]);
                tail_dsc[j] = i;
            }
        }
       headof[start] = tail_dsc[length_dsc[start]]; 
    }

   /* 
    for (int i = 2; i < n; i++) {
        cout << length_dsc[i] << " ";
    } cout << endl;
*/
    solution = 0;
    for (int i = 1; i < n - 1; i++) {
        //cout << length_asc[i] << " " << length_dsc[i + 1] << endl;
        if (length_asc[i] >= 1 && tailof[i] > headof[i + 1]) {
            solution = max(solution, length_asc[i] + length_dsc[i + 1]);
        }
    }

    cout << solution + 2 << "\n";

    return 0;
}
